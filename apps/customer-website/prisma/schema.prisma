// Smart E-Commerce Platform - Prisma Schema
// Optimized for Neon PostgreSQL with AI features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User & Authentication
model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  role          UserRole  @default(CUSTOMER)

  // Customer specific fields
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
  priceAlerts   PriceAlert[]
  searchHistory SearchHistory[]
  preferences   UserPreference?
  activities    UserActivity[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([clerkId])
  @@index([email])
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

// User Preferences for AI Personalization
model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  categories        String[] // Preferred categories
  priceRangeMin     Float?
  priceRangeMax     Float?
  brands            String[]
  notifyPriceDrops  Boolean  @default(true)
  notifyNewArrivals Boolean  @default(true)
  notifyRestocks    Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

// Products
model Product {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  description       String   @db.Text
  shortDescription  String?

  price             Float
  compareAtPrice    Float?   // Original price for discount display
  costPrice         Float?   // For profit calculations

  sku               String   @unique
  barcode           String?

  // Inventory
  stock             Int      @default(0)
  lowStockThreshold Int      @default(10)
  trackInventory    Boolean  @default(true)

  // Organization
  categoryId        String
  category          Category @relation(fields: [categoryId], references: [id])

  brand             String?
  tags              String[]

  // Media
  images            ProductImage[]
  thumbnail         String?

  // SEO & AI
  metaTitle         String?
  metaDescription   String?
  searchKeywords    String[] // For semantic search
  aiGenerated       Boolean  @default(false) // Track AI-assisted products
  aiImageGenerated  Boolean  @default(false) // AI generated images
  aiDescGenerated   Boolean  @default(false) // AI generated description
  aiTagsGenerated   Boolean  @default(false) // AI generated tags
  vectorId          String?  @unique // Pinecone vector ID for semantic search
  embedding         Json?    // Store embedding vector directly

  // Product specifications (for AI to understand product better)
  specifications    Json?     // Flexible field for product specs
  dimensions        String?   // e.g., "10x20x5 cm"
  weight            Float?    // in grams
  color             String?
  size              String?
  material          String?

  // Variants and Custom Attributes
  variants          ProductVariant[]
  attributes        ProductAttribute[]

  // Status
  status            ProductStatus @default(DRAFT)
  featured          Boolean  @default(false)
  trending          Boolean  @default(false)

  // Relationships
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  wishlist          Wishlist[]
  priceHistory      PriceHistory[]
  priceAlerts       PriceAlert[]

  // Analytics
  views             Int      @default(0)
  purchases         Int      @default(0)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  publishedAt       DateTime?

  @@index([slug])
  @@index([categoryId])
  @@index([status])
  @@index([featured])
  @@index([trending])
  @@index([sku])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  OUT_OF_STOCK
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  url       String
  alt       String?
  position  Int      @default(0)

  // AI Generation metadata
  aiGenerated       Boolean  @default(false)
  generationPrompt  String?  @db.Text // Prompt used to generate image
  sourceImageUrl    String?  // If generated from an uploaded image
  modelUsed         String?  // e.g., "gemini-pro-vision", "dall-e-3"

  createdAt DateTime @default(now())

  @@index([productId])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?    @db.Text
  image       String?

  // SEO & Metadata
  metaTitle       String?
  metaDescription String?
  keywords        String[]  // For search optimization

  // Hierarchy (2 levels: parent category and subcategory)
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Restrict)
  children    Category[] @relation("CategoryToCategory")

  products    Product[]

  // Display & Analytics
  position    Int        @default(0)
  isActive    Boolean    @default(true)
  isFeatured  Boolean    @default(false)
  productCount Int       @default(0) // Cache count for performance

  // AI Enhancement
  aiGenerated Boolean    @default(false)
  icon        String?    // Icon name/emoji for category

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([slug])
  @@index([parentId])
  @@index([isActive])
}

// Shopping Cart
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  items     CartItem[]

  // Abandoned cart recovery
  status    CartStatus @default(ACTIVE)
  recoveryEmailSent Boolean @default(false)
  recoveryEmailSentAt DateTime?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([status])
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  quantity  Int      @default(1)
  price     Float    // Price at time of adding to cart

  // AI Bargaining
  negotiatedPrice Float?
  discountApplied Float?  @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

// Orders
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique

  userId          String
  user            User        @relation(fields: [userId], references: [id])

  items           OrderItem[]

  // Pricing
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  discount        Float       @default(0)
  total           Float

  // Coupon/Discount
  couponCode      String?
  couponDiscount  Float       @default(0)

  // Payment
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String?     @unique // Stripe Payment Intent ID
  paymentMethod   String?     // e.g., "card", "paypal"
  stripeCustomerId String?

  // Shipping Information (detailed fields for checkout)
  shippingName    String
  shippingEmail   String
  shippingPhone   String?
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  shippingCountry String      @default("US")

  // Billing Address (can be same as shipping)
  billingAddress  Json?
  sameAsShipping  Boolean     @default(true)

  // Shipping Method
  shippingMethod  String?     // e.g., "standard", "express", "overnight"
  trackingNumber  String?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?

  // Status
  status          OrderStatus @default(PENDING)

  // Notes
  customerNotes   String?     @db.Text

  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?
  cancelledAt     DateTime?

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  quantity  Int
  price     Float   // Price at time of purchase
  subtotal  Float   // quantity * price

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

// Reviews
model Review {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  rating    Int      // 1-5
  title     String?
  comment   String   @db.Text

  verified  Boolean  @default(false) // Verified purchase
  helpful   Int      @default(0)

  status    ReviewStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([status])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

// Wishlist
model Wishlist {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  notifyOnDiscount Boolean @default(true)
  notifyOnRestock  Boolean @default(true)

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

// Price Tracking & Alerts
model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  price     Float

  createdAt DateTime @default(now())

  @@index([productId])
  @@index([createdAt])
}

model PriceAlert {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  targetPrice Float
  triggered   Boolean  @default(false)
  notified    Boolean  @default(false)

  createdAt DateTime @default(now())
  triggeredAt DateTime?

  @@index([userId])
  @@index([productId])
  @@index([triggered])
}

// Search & AI
model SearchHistory {
  id        String   @id @default(cuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  query     String
  results   Int      @default(0)
  clicked   String[] // Product IDs that were clicked

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

// Admin Analytics
model TrendAnalysis {
  id            String   @id @default(cuid())

  productId     String?
  category      String?

  metric        String   // e.g., "views", "sales", "searches"
  value         Float
  change        Float    // Percentage change

  period        String   // e.g., "daily", "weekly", "monthly"
  date          DateTime

  aiPrediction  Boolean  @default(false)
  confidence    Float?   // 0-1 for AI predictions

  createdAt     DateTime @default(now())

  @@index([productId])
  @@index([date])
  @@index([metric])
}

// Stock Alerts
model StockAlert {
  id          String   @id @default(cuid())
  productId   String

  level       StockLevel
  threshold   Int
  resolved    Boolean  @default(false)

  createdAt   DateTime @default(now())
  resolvedAt  DateTime?

  @@index([productId])
  @@index([resolved])
}

enum StockLevel {
  LOW
  OUT_OF_STOCK
  OVERSTOCKED
}

// Product Variants (e.g., different sizes, colors)
model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  name        String   // e.g., "Small - Red", "Medium - Blue"
  sku         String   @unique
  barcode     String?

  // Pricing
  price       Float
  compareAtPrice Float?
  costPrice   Float?

  // Inventory
  stock       Int      @default(0)

  // Variant specifics
  options     Json     // e.g., {"size": "M", "color": "Red"}

  // Media
  image       String?
  images      String[]

  // Status
  isActive    Boolean  @default(true)

  // Relationships
  cartItems   CartItem[]
  orderItems  OrderItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([sku])
}

// Custom Attribute Definitions (Admin creates these)
model AttributeDefinition {
  id          String   @id @default(cuid())
  name        String   @unique  // e.g., "Warranty Period", "Material Type"
  slug        String   @unique
  description String?

  // Data type for the attribute
  dataType    AttributeDataType @default(TEXT)

  // Validation rules
  isRequired  Boolean  @default(false)
  options     String[] // For SELECT type: predefined options
  unit        String?  // e.g., "cm", "kg", "months"

  // Display
  displayOrder Int     @default(0)
  isActive    Boolean  @default(true)

  // Relationships
  attributes  ProductAttribute[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([isActive])
}

enum AttributeDataType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
  DATE
  JSON
}

// Product Attributes (Values for each product)
model ProductAttribute {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  attributeDefinitionId String
  attributeDefinition   AttributeDefinition @relation(fields: [attributeDefinitionId], references: [id], onDelete: Cascade)

  // The actual value (stored as JSON for flexibility)
  value       Json

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, attributeDefinitionId])
  @@index([productId])
  @@index([attributeDefinitionId])
}

// User Activity Tracking for Personalization
model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Activity details
  activityType ActivityType
  productId    String?
  categoryId   String?
  searchQuery  String?

  // Metadata
  metadata     Json?    // Additional data like time spent, scroll depth, etc.
  sessionId    String?  // Track user sessions

  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
  @@index([sessionId])
}

enum ActivityType {
  PRODUCT_VIEW
  ADD_TO_CART
  REMOVE_FROM_CART
  PURCHASE
  SEARCH
  CATEGORY_VIEW
  WISHLIST_ADD
  REVIEW_WRITE
}

// AI Bargaining & Discount Coupons
model Coupon {
  id            String   @id @default(cuid())
  code          String   @unique

  // Coupon details
  discountType  DiscountType
  discountValue Float    // Percentage or fixed amount

  // Usage restrictions
  minPurchase   Float?
  maxDiscount   Float?   // Max discount cap for percentage discounts
  usageLimit    Int?     // Total usage limit
  usageCount    Int      @default(0)
  perUserLimit  Int?     // Per user limit

  // Validity
  validFrom     DateTime
  validUntil    DateTime
  isActive      Boolean  @default(true)

  // AI Bargaining specific
  isAIGenerated Boolean  @default(false)
  userId        String?  // If generated for specific user
  productId     String?  // If product-specific

  // Metadata
  description   String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@index([userId])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// AI Chat Sessions for Bargaining
model ChatSession {
  id          String   @id @default(cuid())
  userId      String?  // Can be anonymous
  productId   String?  // If discussing a specific product

  messages    ChatMessage[]

  // Session metadata
  sessionType SessionType @default(BARGAINING)
  status      ChatStatus  @default(ACTIVE)

  // Outcome
  couponGenerated String?  // Coupon code if discount was given
  dealAccepted    Boolean  @default(false)
  finalDiscount   Float?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  closedAt    DateTime?

  @@index([userId])
  @@index([productId])
  @@index([status])
}

enum SessionType {
  BARGAINING
  SUPPORT
  PRODUCT_INQUIRY
}

enum ChatStatus {
  ACTIVE
  CLOSED
  ESCALATED
}

model ChatMessage {
  id          String   @id @default(cuid())
  sessionId   String
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  role        MessageRole
  content     String   @db.Text

  // AI metadata
  modelUsed   String?  // e.g., "gpt-4"
  tokens      Int?

  createdAt   DateTime @default(now())

  @@index([sessionId])
  @@index([createdAt])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// Product Recommendations
model ProductRecommendation {
  id              String   @id @default(cuid())
  userId          String

  productId       String
  recommendedBy   RecommendationType
  score           Float    // Relevance score

  // Context
  basedOnProductId String? // If recommendation is based on another product
  basedOnCategory  String?

  // Tracking
  shown           Boolean  @default(false)
  clicked         Boolean  @default(false)
  converted       Boolean  @default(false) // Did user purchase?

  createdAt       DateTime @default(now())
  shownAt         DateTime?
  clickedAt       DateTime?
  convertedAt     DateTime?

  @@index([userId])
  @@index([productId])
  @@index([recommendedBy])
}

enum RecommendationType {
  PERSONALIZED_AI
  SIMILAR_PRODUCTS
  FREQUENTLY_BOUGHT_TOGETHER
  TRENDING
  RECENTLY_VIEWED
  CATEGORY_POPULAR
}
